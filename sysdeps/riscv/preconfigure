case "$machine" in
riscv*)
    xlen=`$CC $CFLAGS $CPPFLAGS -E -dM -xc /dev/null | sed -n 's/^#define __riscv_xlen \(.*\)/\1/p'`
    flen=`$CC $CFLAGS $CPPFLAGS -E -dM -xc /dev/null | sed -n 's/^#define __riscv_flen \(.*\)/\1/p'`
    float_abi=`$CC $CFLAGS $CPPFLAGS -E -dM -xc /dev/null | sed -n 's/^#define __riscv_float_abi_\([^ ]*\) .*/\1/p'`
    atomic=`$CC $CFLAGS $CPPFLAGS -E -dM -xc /dev/null | grep '#define __riscv_atomic' | cut -d' ' -f2`
    arch_xthead=`$CC $CFLAGS $CPPFLAGS -E -dM -xc /dev/null | sed -n 's/^#define __riscv_xtheadc.*/yes/p'`
    vlen=`$CC $CFLAGS $CPPFLAGS -E -dM -xc /dev/null | sed -n 's/^#define __riscv_vector \(.*\)/\1/p'`
    arch_v=`$CC $CFLAGS $CPPFLAGS -E -dM -xc /dev/null | sed -n 's/^#define __riscv_v \(.*\)/\1/p'`
    vector_abi=`$CC $CFLAGS $CPPFLAGS -E -dM -xc /dev/null | sed -n 's/^#define __riscv_vector_abi_\([^ ]*\) .*/\1/p'`

    case "$xlen" in
    64 | 32)
	;;
    *)
	echo "Unable to determine XLEN" >&2
	exit 1
	;;
    esac

    case "$flen" in
    64)
	float_machine=rvd
	with_fp_cond=1
	;;
    32)
	echo "glibc does not yet support systems with the F but not D extensions" >&2
	exit 1
	;;
    "")
	with_fp_cond=0
	;;
    *)
	echo "Unable to determine FLEN" >&2
	exit 1
	;;
    esac

    case "$float_abi" in
    soft)
	abi_flen=0
	;;
    single)
	echo "glibc does not yet support the single floating-point ABI" >&2
	exit 1
	;;
    double)
	abi_flen=64
	;;
    *)
	echo "Unable to determine floating-point ABI" >&2
	exit 1
	;;
    esac

    case "$atomic" in
    __riscv_atomic)
        ;;
    *)
        echo "glibc requires the A extension" >&2
	exit 1
	;;
    esac

    case "$arch_xthead" in
    yes*)
        is_arch_xthead=1
        ;;
    *)
        is_arch_xthead=0
        ;;
    esac

    case "$vlen" in
    "")
        abi_vlen=0
        ;;
    *)
        abi_vlen=$vlen
        ;;
    esac

    case "$vector_abi" in
    v)
        vector_abi=1
        ;;
    *)
        vector_abi=0
        ;;
    esac

    case "$arch_v" in
    "")
        arch_v=0
        ;;
    *)
        arch_v=$arch_v
        ;;
    esac

    base_machine=riscv
    machine=riscv/rv$xlen/$float_machine

    $as_echo "#define RISCV_ABI_XLEN $xlen" >>confdefs.h
    $as_echo "#define RISCV_ABI_FLEN $abi_flen" >>confdefs.h
    $as_echo "#define RISCV_ARCH_XTHEAD $is_arch_xthead" >>confdefs.h
    $as_echo "#define RISCV_ABI_VLEN $abi_vlen" >>confdefs.h
    $as_echo "#define RISCV_ARCH_V $arch_v" >>confdefs.h
    $as_echo "#define RISCV_ABI_VECTOR $vector_abi" >>confdefs.h
    ;;
esac
